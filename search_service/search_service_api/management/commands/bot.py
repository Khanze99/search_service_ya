import logging
import requests

from telegram.ext import Updater, CommandHandler, ConversationHandler, MessageHandler, Filters
from telegram import KeyboardButton, ReplyKeyboardMarkup

from django.conf import settings
from django.core.management.base import BaseCommand, CommandError

from search_service_api.helpers import get_history, check_user_in_db
from search_service_api.models import BotUser

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)


class Command(BaseCommand):
    # stages
    CHOICE, DATA, CREATE = range(3)

    def start(self, update, context):
        user = update.message.from_user
        logger.info("User %s started the conversation.", user.first_name)
        text = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–∏—Å–∫–æ–≤–æ–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≥–µ–æ–∫–æ–¥–∏—Ä—É–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ API –≥–µ–æ–∫–æ–¥–µ—Ä –Ø–Ω–¥–µ–∫—Å–∞\n' \
               'QR –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞:\n' \
               '1. "–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å" - –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞\n' \
               '2. "–ò—Å—Ç–æ—Ä–∏—è" - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 5 –≤–∞—à–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n' \
               '\n' \
               '–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /start'

        keyboard = [
            [
                KeyboardButton('–ù–æ–≤—ã–π –ø–æ–∏—Å–∫ üåè'),
                KeyboardButton('–ò—Å—Ç–æ—Ä–∏—è üíæ')
            ]
        ]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        update.message.reply_text(text, reply_markup=reply_markup)

        return self.CHOICE

    def callback_new_query(self, update, context):
        user = update.message.from_user
        flag = check_user_in_db(user)

        if flag is False:
            keyboard = [
                [
                    KeyboardButton('–î–∞'),
                    KeyboardButton('–ù–µ—Ç')
                ]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            update.message.reply_text(text='–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º, –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏'
                                           ' –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö - id –∏ username',
                                      reply_markup=reply_markup)
            return self.CREATE

        update.message.reply_text(
            '–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /skip –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ:')
        return self.DATA

    def skip(self, update, context):
        text = '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å.'
        keyboard = [
            [
                KeyboardButton('–ù–æ–≤—ã–π –ø–æ–∏—Å–∫ üåè'),
                KeyboardButton('–ò—Å—Ç–æ—Ä–∏—è üíæ')
            ]
        ]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        update.message.reply_text(text, reply_markup=reply_markup)

        return self.CHOICE

    def callback_message_new_query(self, update, context):
        user = update.message.from_user
        query = update.message.text
        params = {'geocode': query,
                  'apikey': settings.YANDEX_GEOCODER_TOKEN,
                  'format': 'json'}

        keyboard = [
            [
                KeyboardButton('–ù–æ–≤—ã–π –ø–æ–∏—Å–∫ üåè'),
                KeyboardButton('–ò—Å—Ç–æ—Ä–∏—è üíæ')
            ]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        update.message.reply_text(text=query, reply_markup=reply_markup)

        return self.CHOICE

    def callback_history(self, update, context):

        user = update.message.from_user
        flag = check_user_in_db(user)

        if flag is False:
            keyboard = [
                [
                    KeyboardButton('–î–∞'),
                    KeyboardButton('–ù–µ—Ç')
                ]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            update.message.reply_text(text='–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º, –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏'
                                           ' –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö - id –∏ username',
                                      reply_markup=reply_markup)
            return self.CREATE

        result = get_history(user)
        count = result['count']
        results_list = result['result']
        text = '–í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ {count} –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n'.format(count=count)

        for res in results_list:
            text += '{query} -> {result} ({date})\n'.format(query=res['query'],
                                                            result=res['result'],
                                                            date=res['query_date'].strftime('%d.%m.%y'))

        keyboard = [
            [
                KeyboardButton('–ù–æ–≤—ã–π –ø–æ–∏—Å–∫ üåè'),
                KeyboardButton('–ò—Å—Ç–æ—Ä–∏—è üíæ')
            ]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        update.message.reply_text(text=text, reply_markup=reply_markup)

        return self.CHOICE

    def callback_create_user(self, update, context):
        user = update.message.from_user
        try:
            BotUser.objects.create(user_id=user.id, username=user.username)
        except:
            BotUser.objects.create(user_id=user.id)

        keyboard = [
            [
                KeyboardButton('–ù–æ–≤—ã–π –ø–æ–∏—Å–∫ üåè'),
                KeyboardButton('–ò—Å—Ç–æ—Ä–∏—è üíæ')
            ]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        update.message.reply_text(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ', reply_markup=reply_markup)

        return self.CHOICE

    def skip_create_user(self, update, context):
        update.message.reply_text(text='–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start')
        return ConversationHandler.END

    def main(self):
        updater = Updater(token=settings.TELEGRAM_TOKEN, use_context=True)
        dispatcher = updater.dispatcher
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start)],
            states={
                self.CHOICE: [
                    MessageHandler(Filters.regex('–ù–æ–≤—ã–π –ø–æ–∏—Å–∫'), self.callback_new_query),
                    MessageHandler(Filters.regex('–ò—Å—Ç–æ—Ä–∏—è'), self.callback_history),
                ],
                self.DATA: [
                    MessageHandler(Filters.text & (~Filters.command), self.callback_message_new_query),
                    CommandHandler('skip', self.skip)
                ],
                self.CREATE: [
                    MessageHandler(Filters.regex('^–î–∞$'), self.callback_create_user),
                    MessageHandler(Filters.regex('^–ù–µ—Ç$'), self.skip_create_user)
                ]
            },
            fallbacks=[CommandHandler('start', self.start)]
        )

        dispatcher.add_handler(conv_handler)
        updater.start_polling()

        updater.idle()

    def handle(self, *args, **options):
        self.main()
